import os
import sys
import subprocess
import time
import psutil
import threading
import msvcrt
import json
import re
import ctypes
import winsound

CONFIG_FILE = "profiles.json"

def install_packages():
    required_packages = [
        'psutil',
        'winsound',
        'msvcrt',  # –í—Å—Ç—Ä–æ–µ–Ω –≤ Windows, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        'ctypes',   # –í—Å—Ç—Ä–æ–µ–Ω –≤ Python, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    ]
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞: {package}")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package], stdout=subprocess.DEVNULL)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
install_packages()

def turn_off_display():
    """–í—ã–∫–ª—é—á–∞–µ—Ç –¥–∏—Å–ø–ª–µ–π"""
    try:
        ctypes.windll.user32.SendMessageW(0xFFFF, 0x0112, 0xF170, 2)
        print("\nüñ•Ô∏è –î–∏—Å–ø–ª–µ–π –≤—ã–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –¥–∏—Å–ø–ª–µ—è: {e}")

def parse_time_input(time_str):
    """Parse time input in formats like 1h30m15s, 1h 30m 15s, etc."""
    if not time_str:
        return 0
    
    cleaned = re.sub(r'[^0-9hms]', '', time_str.lower())
    
    hours = 0
    minutes = 0
    seconds = 0
    
    if 'h' in cleaned:
        parts = cleaned.split('h', 1)
        hours = int(parts[0]) if parts[0] else 0
        cleaned = parts[1] if len(parts) > 1 else ''
    
    if 'm' in cleaned:
        parts = cleaned.split('m', 1)
        minutes = int(parts[0]) if parts[0] else 0
        cleaned = parts[1] if len(parts) > 1 else ''
    
    if 's' in cleaned:
        parts = cleaned.split('s', 1)
        seconds = int(parts[0]) if parts[0] else 0
    
    return hours * 3600 + minutes * 60 + seconds

def format_time(seconds):
    """Format seconds into hh:mm:ss format"""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    
    parts = []
    if hours > 0:
        parts.append(f"{hours}h")
    if minutes > 0 or hours > 0:
        parts.append(f"{minutes}m")
    parts.append(f"{seconds}s")
    
    return " ".join(parts)

def get_interface():
    try:
        interfaces = list(psutil.net_io_counters(pernic=True).keys())
        if not interfaces:
            print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤!")
            return None
            
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        for idx, name in enumerate(interfaces, 1):
            print(f"{idx}. {name}")
            
        while True:
            try:
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ")
                if not choice:
                    return None
                choice = int(choice) - 1
                return interfaces[choice]
            except (ValueError, IndexError):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
        return None

def save_profile(profile_name, settings):
    try:
        profiles = load_profiles()
        profiles[profile_name] = settings
        with open(CONFIG_FILE, "w", encoding='utf-8') as file:
            json.dump(profiles, file, indent=4, ensure_ascii=False)
        print(f"\n‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'profiles.json'.")
        return True
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

def load_profiles():
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, "r", encoding='utf-8') as file:
                return json.load(file)
        return {}
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        return {}

def list_profiles():
    try:
        profiles = load_profiles()
        if not profiles:
            print("\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.")
            return None
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
        for idx, name in enumerate(profiles.keys(), 1):
            print(f"{idx}. {name}")
        return profiles
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        return None

def delete_profile():
    try:
        profiles = load_profiles()
        if not profiles:
            print("\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        profile_names = list(profiles.keys())
        for idx, name in enumerate(profile_names, 1):
            print(f"{idx}. {name}")
        
        while True:
            try:
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (0 - –æ—Ç–º–µ–Ω–∞): ")
                if choice == '0':
                    return
                if not choice:
                    continue
                    
                choice = int(choice)
                if 1 <= choice <= len(profile_names):
                    profile_to_delete = profile_names[choice - 1]
                    confirm = input(f"\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å '{profile_to_delete}'? (y/n): ").lower()
                    if confirm == 'y':
                        del profiles[profile_to_delete]
                        with open(CONFIG_FILE, "w", encoding='utf-8') as file:
                            json.dump(profiles, file, indent=4, ensure_ascii=False)
                        print(f"\n‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                        return
                    else:
                        print("\n‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                        return
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

def move_profile():
    try:
        profiles = load_profiles()
        if not profiles:
            print("\n‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
            return
        
        profile_names = list(profiles.keys())
        print("\n–¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π:")
        for idx, name in enumerate(profile_names, 1):
            print(f"{idx}. {name}")
        
        while True:
            try:
                choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (0 - –æ—Ç–º–µ–Ω–∞): ")
                if choice == '0':
                    return
                if not choice:
                    continue
                    
                choice = int(choice)
                if 1 <= choice <= len(profile_names):
                    profile_to_move = profile_names[choice - 1]
                    new_position = input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile_to_move}' (1-{len(profile_names)}): ")
                    
                    if not new_position:
                        continue
                        
                    new_position = int(new_position)
                    if 1 <= new_position <= len(profile_names):
                        if choice == new_position:
                            print("\n‚ùå –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
                            continue
                            
                        new_profiles = {}
                        keys = list(profiles.keys())
                        keys.remove(profile_to_move)
                        keys.insert(new_position - 1, profile_to_move)
                        
                        for key in keys:
                            new_profiles[key] = profiles[key]
                            
                        with open(CONFIG_FILE, "w", encoding='utf-8') as file:
                            json.dump(new_profiles, file, indent=4, ensure_ascii=False)
                            
                        print("\n‚úÖ –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
                        return
                    else:
                        print(f"‚ùå –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(profile_names)}.")
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

def edit_profile(profile_name):
    try:
        profiles = load_profiles()
        if profile_name not in profiles:
            print("\n‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False
            
        settings = profiles[profile_name]
        new_settings = settings.copy()
        
        print(f"\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}")
        print("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n")
        
        print(f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {settings['interface']}")
        print("1. –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("2. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π")
        interface_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2): ")
        if interface_choice == "1":
            new_interface = get_interface()
            if new_interface:
                new_settings['interface'] = new_interface
        
        current_type = 'Upload (u)' if settings['traffic_type'] == 'u' else 'Download (d)'
        print(f"\n–¢–µ–∫—É—â–∏–π —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞: {current_type}")
        new_type = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ (u/d) –∏–ª–∏ Enter —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π: ").lower()
        if new_type in ['u', 'd']:
            new_settings['traffic_type'] = new_type
        
        print(f"\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤: {settings['allowed_failures']}")
        new_failures = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ Enter —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ: ")
        if new_failures:
            try:
                new_settings['allowed_failures'] = int(new_failures)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        
        current_threshold = settings['threshold'] / 1024**2
        print(f"\n–¢–µ–∫—É—â–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {current_threshold:.2f} –ú–ë/—Å")
        new_threshold = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—Ä–æ–≥–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (–ú–ë/—Å) –∏–ª–∏ Enter —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é: ")
        if new_threshold:
            try:
                new_settings['threshold'] = float(new_threshold) * 1024**2
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        
        print(f"\n–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings['interval']} —Å–µ–∫")
        new_interval = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫) –∏–ª–∏ Enter —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π: ")
        if new_interval:
            try:
                new_settings['interval'] = int(new_interval)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        
        current_delay = settings['shutdown_delay']
        print(f"\n–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {format_time(current_delay)}")
        new_delay = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1h30m15s) –∏–ª–∏ Enter —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é: ")
        if new_delay:
            try:
                parsed_seconds = parse_time_input(new_delay)
                if parsed_seconds > 0:
                    new_settings['shutdown_delay'] = parsed_seconds
                else:
                    print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        
        action_modes = {
            's': '–í—ã–∫–ª—é—á–µ–Ω–∏–µ',
            'r': '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞',
            'h': '–°–ø—è—â–∏–π —Ä–µ–∂–∏–º',
            'b': '–ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª'
        }
        current_mode = settings.get('action_mode', 's')
        print(f"\n–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è: {action_modes.get(current_mode, '–í—ã–∫–ª—é—á–µ–Ω–∏–µ')}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
        print("s - –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
        print("r - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
        print("h - –°–ø—è—â–∏–π —Ä–µ–∂–∏–º")
        print("b - –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª")
        new_mode = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è (s/r/h/b) –∏–ª–∏ Enter —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π: ").lower()
        if new_mode in ['s', 'r', 'h', 'b']:
            new_settings['action_mode'] = new_mode
        
        print("\n–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {settings['interface']} ‚Üí {new_settings['interface']}")
        print(f"–¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞: {settings['traffic_type']} ‚Üí {new_settings['traffic_type']}")
        print(f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏: {settings['allowed_failures']} ‚Üí {new_settings['allowed_failures']}")
        print(f"–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {settings['threshold']/1024**2:.2f} ‚Üí {new_settings['threshold']/1024**2:.2f} –ú–ë/—Å")
        print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings['interval']} ‚Üí {new_settings['interval']} —Å–µ–∫")
        print(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {format_time(settings['shutdown_delay'])} ‚Üí {format_time(new_settings['shutdown_delay'])}")
        print(f"–†–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è: {action_modes.get(settings.get('action_mode', 's'))} ‚Üí {action_modes.get(new_settings.get('action_mode', 's'))}")
        
        save = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/n): ").lower()
        if save == 'y':
            return save_profile(profile_name, new_settings)
        else:
            print("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

def perform_action(action_mode):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º"""
    try:
        if action_mode == 's':  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ
            os.system('shutdown /f /s /t 0')
        elif action_mode == 'r':  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
            os.system('shutdown /f /r /t 0')
        elif action_mode == 'h':  # –°–ø—è—â–∏–π —Ä–µ–∂–∏–º
            ctypes.windll.PowrProf.SetSuspendState(0, 1, 0)
        elif action_mode == 'b':  # –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
            for _ in range(3):  # 3 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                winsound.Beep(1000, 500)  # –ß–∞—Å—Ç–æ—Ç–∞ 1000 –ì—Ü, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 500 –º—Å
                time.sleep(0.3)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")

def countdown_action(seconds, shutdown_event, action_mode='s'):
    try:
        action_names = {
            's': '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ',
            'r': '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞',
            'h': '–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º',
            'b': '–∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª'
        }
        action_name = action_names.get(action_mode, '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ')
        
        for i in range(seconds, 0, -1):
            if shutdown_event.is_set():
                return
            print(f"\r{action_name.capitalize()} —á–µ—Ä–µ–∑ {format_time(i)}. [ESC - –æ—Ç–º–µ–Ω–∞]".ljust(80), end='', flush=True)
            time.sleep(1)
        if not shutdown_event.is_set():
            perform_action(action_mode)
            # –î–ª—è –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            if action_mode == 'b':
                return
    except Exception:
        pass

def check_user_input(shutdown_event, monitoring_event=None, pause_event=None):
    try:
        while not shutdown_event.is_set():
            if msvcrt.kbhit():
                key = msvcrt.getch()
                if key == b'\x1b':  # ESC
                    shutdown_event.set()
                    if monitoring_event:
                        monitoring_event.set()
                    os.system('shutdown /a')
                    print("\nüö® –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
                    return
                elif key == b'\x13' and monitoring_event and pause_event:  # Ctrl+S
                    if pause_event.is_set():
                        pause_event.clear()
                        print("\n‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω (–Ω–∞–∂–º–∏—Ç–µ Ctrl+S –¥–ª—è –ø–∞—É–∑—ã)")
                    else:
                        pause_event.set()
                        print("\n‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è)")
                elif key == b'\x04':  # Ctrl+D - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
                    turn_off_display()
    except Exception:
        pass

def monitor_traffic(interface, traffic_type, allowed_failures, threshold, interval, shutdown_delay, action_mode='s'):
    try:
        failure_count = 0
        old_stats = psutil.net_io_counters(pernic=True)[interface]
        old_bytes = old_stats.bytes_sent if traffic_type == "u" else old_stats.bytes_recv
        
        shutdown_event = threading.Event()
        monitoring_event = threading.Event()
        pause_event = threading.Event()
        
        input_thread = threading.Thread(target=check_user_input, args=(shutdown_event, monitoring_event, pause_event))
        input_thread.daemon = True
        input_thread.start()

        action_names = {
            's': '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ',
            'r': '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞',
            'h': '–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º',
            'b': '–∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª'
        }
        action_name = action_names.get(action_mode, '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ')
        
        print("\n‚ÑπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:")
        print("ESC - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        print("Ctrl+S - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("Ctrl+D - –≤—ã–∫–ª—é—á–∏—Ç—å –¥–∏—Å–ø–ª–µ–π")

        while not monitoring_event.is_set():
            try:
                if pause_event.is_set():
                    if msvcrt.kbhit():
                        msvcrt.getch()
                        pause_event.clear()
                        print("‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω (–Ω–∞–∂–º–∏—Ç–µ Ctrl+S –¥–ª—è –ø–∞—É–∑—ã)")
                    else:
                        time.sleep(0.1)
                        continue
                
                time.sleep(interval)
                new_stats = psutil.net_io_counters(pernic=True)[interface]
                new_bytes = new_stats.bytes_sent if traffic_type == "u" else new_stats.bytes_recv
                speed = (new_bytes - old_bytes) / interval

                direction = "üì§ Upload" if traffic_type == "u" else "üì• Download"
                print(f"{direction}: {speed/1024**2:.2f} –ú–ë/—Å [ESC - —Å—Ç–æ–ø | Ctrl+S - –ø–∞—É–∑–∞ | Ctrl+D - –≤—ã–∫–ª. –¥–∏—Å–ø–ª–µ–π]")

                if speed < threshold:
                    failure_count += 1
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–æ–≤ –¥–æ {action_name}: {allowed_failures - failure_count}")
                    if failure_count >= allowed_failures:
                        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏! –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è {action_name}...")
                        countdown_thread = threading.Thread(target=countdown_action, args=(shutdown_delay, shutdown_event, action_mode))
                        countdown_thread.start()
                        countdown_thread.join()
                        
                        if shutdown_event.is_set():
                            print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                            return True
                        
                        # –î–ª—è –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
                        if action_mode == 'b':
                            print("\nüîä –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...")
                            return True
                        return False
                else:
                    failure_count = 0

                old_bytes = new_bytes

            except (KeyboardInterrupt, SystemExit):
                print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return True
            except Exception as e:
                print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(5)
                continue
                
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return True
                
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return True

def timed_action():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        action_modes = {
            's': '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ',
            'r': '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞',
            'h': '–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º',
            'b': '–∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª'
        }
        
        print("\n=== –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ===")
        print("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1h30m15s)")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 1h30m15s, 1h 30m 15s, 1h-30m-15s")
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è:")
        print("s - –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
        print("r - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
        print("h - –°–ø—è—â–∏–π —Ä–µ–∂–∏–º")
        print("b - –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª")
        
        while True:
            action_mode = input("\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è (s/r/h/b): ").lower()
            if action_mode in action_modes:
                break
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        while True:
            time_input = input(f"\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ {action_modes[action_mode]} (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ")
            if not time_input:
                print("‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                return
            
            try:
                seconds = parse_time_input(time_input)
                if seconds <= 0:
                    print("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                    continue
                
                print(f"\nüïí –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {action_modes[action_mode]} —á–µ—Ä–µ–∑ {format_time(seconds)}")
                print("–ù–∞–∂–º–∏—Ç–µ ESC –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                
                shutdown_event = threading.Event()
                input_thread = threading.Thread(target=check_user_input, args=(shutdown_event,))
                input_thread.daemon = True
                input_thread.start()
                
                countdown_action(seconds, shutdown_event, action_mode)
                
                if shutdown_event.is_set():
                    print("\nüö® –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
                else:
                    return
                
                break
                
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    try:
        while True:
            try:
                print("\n--- –ú–µ–Ω—é ---")
                print("1. –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏)")
                print("2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏)")
                print("3. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                print("4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
                print("5. –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π")
                print("6. –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)")
                print("7. –í—ã—Ö–æ–¥")
                
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1/2/3/4/5/6/7): ")
                
                if choice == "1":
                    profiles = list_profiles()
                    if not profiles:
                        continue
                        
                    profile_names = list(profiles.keys())
                    try:
                        profile_choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ")
                        if not profile_choice:
                            continue
                            
                        profile_choice = int(profile_choice) - 1
                        selected_profile = profiles[profile_names[profile_choice]]
                        print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile_names[profile_choice]}")

                        while True:
                            should_restart = monitor_traffic(
                                selected_profile['interface'],
                                selected_profile['traffic_type'],
                                selected_profile['allowed_failures'],
                                selected_profile['threshold'],
                                selected_profile['interval'],
                                selected_profile['shutdown_delay'],
                                selected_profile.get('action_mode', 's')
                            )
                            
                            if not should_restart:
                                return
                            print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                            if msvcrt.getch() == b'\r':
                                break
                            
                    except (ValueError, IndexError):
                        print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                elif choice == "2":
                    interface = get_interface()
                    if not interface:
                        continue

                    while True:
                        traffic_type = input("–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å Upload/Download? (u/d): ").lower()
                        if traffic_type in ["u", "d"]:
                            break
                        print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ 'u' –∏–ª–∏ 'd'")

                    allowed_failures = 3
                    threshold = 0.1
                    interval = 10
                    shutdown_delay = 30
                    action_mode = 's'
                    
                    try:
                        allowed_failures = int(input(f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {allowed_failures}]: ") or allowed_failures)
                        threshold = float(input(f"–ü–æ—Ä–æ–≥–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–ú–ë/—Å) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {threshold}]: ") or threshold) * 1024**2
                        interval = int(input(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {interval}]: ") or interval)
                        
                        default_delay_str = format_time(shutdown_delay)
                        delay_input = input(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ –¥–µ–π—Å—Ç–≤–∏—è (–ù–∞–ø—Ä–∏–º–µ—Ä: 1h30m15s) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_delay_str}]: ")
                        if delay_input:
                            parsed_seconds = parse_time_input(delay_input)
                            if parsed_seconds > 0:
                                shutdown_delay = parsed_seconds
                            else:
                                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                        
                        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏:")
                        print("s - –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
                        print("r - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
                        print("h - –°–ø—è—â–∏–π —Ä–µ–∂–∏–º")
                        print("b - –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª")
                        action_mode = input("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–π—Å—Ç–≤–∏—è (s/r/h/b) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: s]: ").lower()
                        if action_mode not in ['s', 'r', 'h', 'b']:
                            action_mode = 's'
                            print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

                    save_choice = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å? (y/n): ").lower()
                    if save_choice == "y":
                        profile_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è: ")
                        if profile_name:
                            settings = {
                                "interface": interface,
                                "traffic_type": traffic_type,
                                "allowed_failures": allowed_failures,
                                "threshold": threshold,
                                "interval": interval,
                                "shutdown_delay": shutdown_delay,
                                "action_mode": action_mode
                            }
                            save_profile(profile_name, settings)

                    while True:
                        should_restart = monitor_traffic(interface, traffic_type, allowed_failures, threshold, interval, shutdown_delay, action_mode)
                        if not should_restart:
                            return
                        print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                        if msvcrt.getch() == b'\r':
                            break

                elif choice == "3":
                    delete_profile()

                elif choice == "4":
                    profiles = list_profiles()
                    if not profiles:
                        continue
                        
                    profile_names = list(profiles.keys())
                    try:
                        profile_choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ")
                        if not profile_choice:
                            continue
                            
                        profile_choice = int(profile_choice) - 1
                        profile_to_edit = profile_names[profile_choice]
                        edit_profile(profile_to_edit)
                    except (ValueError, IndexError):
                        print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                elif choice == "5":
                    move_profile()

                elif choice == "6":
                    timed_action()

                elif choice == "7":
                    print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                    break

                else:
                    print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            except KeyboardInterrupt:
                print("\nüõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...")
                continue
                
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    main()